// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("examples")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String         @id @default(cuid())
    email         String?        @unique
    password      String?
    salt          String?
    emailVerified DateTime?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    categories    PostCategory[]
    postImages    PostImage[]
    profile       UserProfile?
    role          UserRole?
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt

    @@map("users")
}

model UserProfile {
    id         String  @id @default(cuid())
    userId     String  @unique
    profileUrl String?
    username   String  @unique
    bio        String?
    website    String?
    location   String?
    user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("user_profiles")
}

model UserRole {
    id        String @id @default(cuid())
    userId    String @unique
    authority String
    user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("user_roles")
}

model Post {
    id          Int      @id @default(autoincrement())
    title       String? // 제목
    content     String? // @db.Text 에디터 내용
    subTitle    String? // 부제목
    description String? // @db.Text 메타 태그 설명
    issueDate   DateTime? // 발행시간 발행시간 값이 없으면 작성시간으로 대체
    isDraft     Boolean  @default(true) // 임시저장 여부
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    categoryId Int?
    category   PostCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

    thumbnailId Int?
    thumbnail   PostImage? @relation(fields: [thumbnailId], references: [id], onDelete: Cascade)

    postsTags PostsTags[]
    likes     PostLike[]
    stats     PostStats?

    @@map("posts")
}

model PostImage {
    id         Int      @id @default(autoincrement())
    url        String
    mediaType  String
    uploadType String   @default("etc")
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    userId     String
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    posts      Post[]

    @@map("post_images")
}

model PostLike {
    id        Int      @id @default(autoincrement())
    guestId   String   @unique
    postId    Int
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index(postId)
    @@map("post_likes")
}

model Tag {
    id          Int         @id @default(autoincrement())
    name        String
    description String?
    thumbnail   String?
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    postsTags   PostsTags[]

    @@map("tags")
}

model PostsTags {
    post   Post @relation(fields: [postId], references: [id])
    postId Int
    tag    Tag  @relation(fields: [tagId], references: [id])
    tagId  Int

    @@id([postId, tagId])
    @@index(postId)
    @@index(tagId)
    @@map("posts_tags")
}

model PostCategory {
    id          Int      @id @default(autoincrement())
    name        String
    description String?
    thumbnail   String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    posts       Post[]

    @@map("post_categories")
}

model PostStats {
    id            Int      @id @default(autoincrement())
    postId        Int      @unique
    likes         Int      @default(0)
    clicks        Int      @default(0)
    views         Int      @default(0)
    score         Float    @default(0)
    commentsCount Int      @default(0)
    post          Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    updatedAt     DateTime @default(now()) @updatedAt

    @@index([score(sort: Desc), postId(sort: Desc)])
    @@index([likes(sort: Desc), postId(sort: Desc)])
    @@map("post_stats")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}
