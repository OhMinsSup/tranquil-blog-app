// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("examples")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String       @id @default(cuid())
    email         String?      @unique
    password      String?
    salt          String?
    emailVerified DateTime?
    accounts      Account[]
    sessions      Session[]
    profile       UserProfile?
    role          UserRole?
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt

    @@map("users")
}

model UserProfile {
    id         String  @id @default(cuid())
    userId     String  @unique
    profileUrl String?
    username   String  @unique
    bio        String?
    website    String?
    location   String?
    user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("user_profiles")
}

model UserRole {
    id        String @id @default(cuid())
    userId    String @unique
    authority String
    user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("user_roles")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}
